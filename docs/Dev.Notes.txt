


https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request

https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#preflighted_requests



work around cors preflight trigger

GET ?delete='tag_name'

üêï karl.rink@Karl-MacBook-Pro html % curl -X GET "http://127.0.0.1:8880/s3/ninfo/test.txt"              
{
  "label": "value", 
  "label88": "value88", 
  "label99": "value99", 
  "labelNEW": "valueNEW", 
  "labeler": "karl", 
  "labelme": "valueme", 
  "new_form_label": "final test", 
  "plabeler": "karl"
}
üêï karl.rink@Karl-MacBook-Pro html % curl -X GET "http://127.0.0.1:8880/s3/ninfo/test.txt?delete=new_form_label"
{
  "delete": true, 
  "message": "Deleted", 
  "method": "DELETE", 
  "name": "test.txt", 
  "status": 211, 
  "tag": "new_form_label"
}



this works:

curl -X DELETE "http://127.0.0.1:8880/s3/ninfo/test.txt?tag=label"

but not javascript fetch DELETE:

WTF

<script>
fetch('http://127.0.0.1:8880/s3/ninfo/test.txt?tag=label', {
        method: 'DELETE',
    })
        .then(response => response.json())
        .then(json => console.log(json))
        .catch(err => console.log('Request Failed', err));
</script>

Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at http://127.0.0.1:8880/s3/ninfo/test.txt?tag=label. (Reason: CORS header ‚ÄòAccess-Control-Allow-Origin‚Äô missing).

sever side gets 'OPTIONS'...

127.0.0.1 - - [18/Aug/2021 12:20:32] "OPTIONS /s3/ninfo/test.txt?tag=label HTTP/1.1" 200 -

why is it not a delete method like curl -X DELETE?

127.0.0.1 - - [18/Aug/2021 12:08:42] "DELETE /s3/ninfo/test.txt?tag=label HTTP/1.1" 211 - 


https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS

a CORS preflight request...

GET, HEAD, POST do not trigger a CORS preflight.  but PUT, DELETE do...

https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request


Unlike simple requests, for "preflighted" requests the browser first sends an HTTP request using the OPTIONS method to the resource on the other origin, in order to determine if the actual request is safe to send. Cross-site requests are preflighted like this since they may have implications to user data.






---


need javascript get query strings...  ?bucket=name&file=name

need back button.  need page history...

https://developer.mozilla.org/en-US/docs/Web/API/History_API




https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch


hyperlink or click on particular textbox, label 

For hyperlink
<a href=‚ÄùLink_of_page‚Äù>Text Written on Link</a>

For button
<button type="button" id="id_of_button" onclick="EditData()">Text on button</button>

For textbox
<input type="text" id="textbox_id" onclick="EditData()‚Äù>

For Label
<label id="lable_id" onclick="EditData()>Label_Text</label>

Use JavaScript to handle event function(similar for button, textbox, label)
<script>
function EditData(){
//Code
}


js back

 <button onclick="goBack()">Go Back</button>

<script>
function goBack() {
  window.history.back();
}
</script> 



