

        if sys.argv[1] == "set" or sys.argv[1] == "label":

            s3path = sys.argv[2]
            s3json = sys.argv[3]

            s3bucket = s3path.split("/", 1)[0]

            try:
                s3object = s3path.split("/", 1)[1]
            except IndexError as e:
                s3object = ''

            data = json.loads(s3json)

            #print(len(data))

            if len(data) > 1:
                print('data larger than 1')
                sys.exit(1)


            for k,v in data.items():
                #print(k)
                #print(v)
                tag = k
                val = v


            #update = update_s3object_tag(s3bucket, s3object, tag, value)

            update = update_s3object_tag(s3bucket, s3object, tag, val)
            #print(update)

            if update == True:
                print(json.dumps({'label':True}))
                sys.exit(0)
            else:
                print(json.dumps({'label':False}))
                sys.exit(1)






def extract_rekognition_words(rekognition_json_content):

    data = json.loads(rekognition_json_content)

    List = []

    for key in data['Labels']:
        List.append(str(key['Name']))





            #_wL = extract_rekognition_words(rekognition_json_content)
            #print(str(_wL))



            rekognition_json_file = 'rekognition/' + s3object + '.json'

            s3 = boto3.resource('s3')

            obj = s3.Object(s3bucket, rekognition_json_file)
            try:
                body = obj.get()['Body'].read()

            except botocore.exceptions.ClientError as e:
                #print(e.response)
                if e.response['Error']['Code'] == 'NoSuchKey':
                    #print(json.dumps({'NoSuchKey':s3object}, indent=2))
                    #print(json.dumps({'NoSuchKey':'Rekognition ' + s3object}, indent=2))
                    print(json.dumps({'NoSuchKey':rekognition_json_file}, indent=2))
                    sys.exit(1)
                else:
                    print(json.dumps({'ClientError':str(e)}))
                    sys.exit(1)

            #print(body)
            #.decode("utf-8", "strict") # 'strict' (raise a UnicodeDecodeError exception)

            content = body.decode("utf-8", "strict").rstrip()

            print(content)

            sys.exit()





auto upload working...


ðŸ§¨ karl.rink@Karl-MacBook-Pro s3labeler % ./s3labeler.py rekognition ninfo-property-images/048ac85025e2217e5171326706b7fb535d27caa9.jpg detect-labels
detect-labels
ninfo-property-images
048ac85025e2217e5171326706b7fb535d27caa9.jpg
{
    "Labels": [
        {
            "Name": "Home Decor",
            "Confidence": 99.95471954345703,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Grass",
            "Confidence": 99.002197265625,
            "Instances": [],
            "Parents": [
                {
                    "Name": "Plant"
                }
            ]
        },
        {
            "Name": "Plant",
            "Confidence": 99.002197265625,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Housing",
            "Confidence": 91.19820404052734,
            "Instances": [],
            "Parents": [
                {
                    "Name": "Building"
                }
            ]
        },
        {
            "Name": "Building",
            "Confidence": 91.19820404052734,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Neighborhood",
            "Confidence": 89.2183609008789,
            "Instances": [],
            "Parents": [
                {
                    "Name": "Urban"
                },
                {
                    "Name": "Building"
                }
            ]
        },
        {
            "Name": "Urban",
            "Confidence": 89.2183609008789,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Window",
            "Confidence": 88.88621520996094,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Shutter",
            "Confidence": 86.48400115966797,
            "Instances": [],
            "Parents": [
                {
                    "Name": "Curtain"
                },
                {
                    "Name": "Window"
                }
            ]
        },
        {
            "Name": "Curtain",
            "Confidence": 86.48400115966797,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Brick",
            "Confidence": 85.72686767578125,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Yard",
            "Confidence": 85.4259033203125,
            "Instances": [],
            "Parents": [
                {
                    "Name": "Outdoors"
                },
                {
                    "Name": "Nature"
                }
            ]
        },
        {
            "Name": "Nature",
            "Confidence": 85.4259033203125,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Outdoors",
            "Confidence": 85.4259033203125,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "House",
            "Confidence": 72.26211547851562,
            "Instances": [],
            "Parents": [
                {
                    "Name": "Housing"
                },
                {
                    "Name": "Building"
                }
            ]
        },
        {
            "Name": "Path",
            "Confidence": 69.62654876708984,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Lawn",
            "Confidence": 69.16907501220703,
            "Instances": [],
            "Parents": [
                {
                    "Name": "Grass"
                },
                {
                    "Name": "Plant"
                }
            ]
        },
        {
            "Name": "Vegetation",
            "Confidence": 62.195274353027344,
            "Instances": [],
            "Parents": [
                {
                    "Name": "Plant"
                }
            ]
        },
        {
            "Name": "Window Shade",
            "Confidence": 59.31571960449219,
            "Instances": [],
            "Parents": [
                {
                    "Name": "Curtain"
                },
                {
                    "Name": "Home Decor"
                },
                {
                    "Name": "Window"
                }
            ]
        },
        {
            "Name": "Potted Plant",
            "Confidence": 59.29153823852539,
            "Instances": [],
            "Parents": [
                {
                    "Name": "Plant"
                },
                {
                    "Name": "Vase"
                },
                {
                    "Name": "Jar"
                },
                {
                    "Name": "Pottery"
                }
            ]
        },
        {
            "Name": "Pottery",
            "Confidence": 59.29153823852539,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Jar",
            "Confidence": 59.29153823852539,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Vase",
            "Confidence": 59.29153823852539,
            "Instances": [],
            "Parents": [
                {
                    "Name": "Jar"
                },
                {
                    "Name": "Pottery"
                }
            ]
        },
        {
            "Name": "Walkway",
            "Confidence": 58.462730407714844,
            "Instances": [],
            "Parents": [
                {
                    "Name": "Path"
                }
            ]
        },
        {
            "Name": "Flower",
            "Confidence": 55.959808349609375,
            "Instances": [],
            "Parents": [
                {
                    "Name": "Plant"
                }
            ]
        },
        {
            "Name": "Blossom",
            "Confidence": 55.959808349609375,
            "Instances": [],
            "Parents": [
                {
                    "Name": "Plant"
                }
            ]
        }
    ],
    "LabelModelVersion": "2.0",
    "ResponseMetadata": {
        "RequestId": "eac0df73-905e-4580-b934-90ec619f468f",
        "HTTPStatusCode": 200,
        "HTTPHeaders": {
            "content-type": "application/x-amz-json-1.1",
            "date": "Mon, 26 Jul 2021 21:18:23 GMT",
            "x-amzn-requestid": "eac0df73-905e-4580-b934-90ec619f468f",
            "content-length": "2490",
            "connection": "keep-alive"
        },
        "RetryAttempts": 0
    }
}
{
  "RekognitionUpload": "True"
}
ðŸ§¨ karl.rink@Karl-MacBook-Pro s3labeler %



Traceback (most recent call last):
  File "./s3labeler.py", line 1430, in <module>
    main()
  File "./s3labeler.py", line 1128, in main
    s3_upload = s3_client.upload_file(fp, s3bucket, rekognition_json_file)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/boto3/s3/inject.py", line 129, in upload_file
    return transfer.upload_file(
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/boto3/s3/transfer.py", line 273, in upload_file
    raise ValueError('Filename must be a string')
ValueError: Filename must be a string




  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/genericpath.py", line 50, in getsize
    return os.stat(filename).st_size
OSError: [Errno 63] File name too long: '{\n    "Labels": [\n        {\n            "Name": "Home Decor",\n            "Confidence": 99.95471954345703,\n   



ðŸ§¨ karl.rink@Karl-MacBook-Pro s3labeler % ./s3labeler.py rekognition ninfo-property-images/048ac85025e2217e5171326706b7fb535d27caa9.jpg detect-labels
detect-labels
ninfo-property-images
048ac85025e2217e5171326706b7fb535d27caa9.jpg
{'Labels': [{'Name': 'Home Decor', 'Confidence': 99.95471954345703, 'Instances': [], 'Parents': []}, {'Name': 'Grass', 'Confidence': 99.002197265625, 'Instances': [], 'Parents': [{'Name': 'Plant'}]}, {'Name': 'Plant', 'Confidence': 99.002197265625, 'Instances': [], 'Parents': []}, {'Name': 'Housing', 'Confidence': 91.19820404052734, 'Instances': [], 'Parents': [{'Name': 'Building'}]}, {'Name': 'Building', 'Confidence': 91.19820404052734, 'Instances': [], 'Parents': []}, {'Name': 'Neighborhood', 'Confidence': 89.2183609008789, 'Instances': [], 'Parents': [{'Name': 'Urban'}, {'Name': 'Building'}]}, {'Name': 'Urban', 'Confidence': 89.2183609008789, 'Instances': [], 'Parents': []}, {'Name': 'Window', 'Confidence': 88.88621520996094, 'Instances': [], 'Parents': []}, {'Name': 'Shutter', 'Confidence': 86.48400115966797, 'Instances': [], 'Parents': [{'Name': 'Curtain'}, {'Name': 'Window'}]}, {'Name': 'Curtain', 'Confidence': 86.48400115966797, 'Instances': [], 'Parents': []}, {'Name': 'Brick', 'Confidence': 85.72686767578125, 'Instances': [], 'Parents': []}, {'Name': 'Yard', 'Confidence': 85.4259033203125, 'Instances': [], 'Parents': [{'Name': 'Outdoors'}, {'Name': 'Nature'}]}, {'Name': 'Nature', 'Confidence': 85.4259033203125, 'Instances': [], 'Parents': []}, {'Name': 'Outdoors', 'Confidence': 85.4259033203125, 'Instances': [], 'Parents': []}, {'Name': 'House', 'Confidence': 72.26211547851562, 'Instances': [], 'Parents': [{'Name': 'Housing'}, {'Name': 'Building'}]}, {'Name': 'Path', 'Confidence': 69.62654876708984, 'Instances': [], 'Parents': []}, {'Name': 'Lawn', 'Confidence': 69.16907501220703, 'Instances': [], 'Parents': [{'Name': 'Grass'}, {'Name': 'Plant'}]}, {'Name': 'Vegetation', 'Confidence': 62.195274353027344, 'Instances': [], 'Parents': [{'Name': 'Plant'}]}, {'Name': 'Window Shade', 'Confidence': 59.31571960449219, 'Instances': [], 'Parents': [{'Name': 'Curtain'}, {'Name': 'Home Decor'}, {'Name': 'Window'}]}, {'Name': 'Potted Plant', 'Confidence': 59.29153823852539, 'Instances': [], 'Parents': [{'Name': 'Plant'}, {'Name': 'Vase'}, {'Name': 'Jar'}, {'Name': 'Pottery'}]}, {'Name': 'Pottery', 'Confidence': 59.29153823852539, 'Instances': [], 'Parents': []}, {'Name': 'Jar', 'Confidence': 59.29153823852539, 'Instances': [], 'Parents': []}, {'Name': 'Vase', 'Confidence': 59.29153823852539, 'Instances': [], 'Parents': [{'Name': 'Jar'}, {'Name': 'Pottery'}]}, {'Name': 'Walkway', 'Confidence': 58.462730407714844, 'Instances': [], 'Parents': [{'Name': 'Path'}]}, {'Name': 'Flower', 'Confidence': 55.959808349609375, 'Instances': [], 'Parents': [{'Name': 'Plant'}]}, {'Name': 'Blossom', 'Confidence': 55.959808349609375, 'Instances': [], 'Parents': [{'Name': 'Plant'}]}], 'LabelModelVersion': '2.0', 'ResponseMetadata': {'RequestId': '16f6086d-478f-44c6-947d-49681931b6c9', 'HTTPStatusCode': 200, 'HTTPHeaders': {'content-type': 'application/x-amz-json-1.1', 'date': 'Mon, 26 Jul 2021 20:33:48 GMT', 'x-amzn-requestid': '16f6086d-478f-44c6-947d-49681931b6c9', 'content-length': '2490', 'connection': 'keep-alive'}, 'RetryAttempts': 0}}
Traceback (most recent call last):
  File "./s3labeler.py", line 1423, in <module>
    main()
  File "./s3labeler.py", line 1114, in main
    fp.write(json.dumps(response, indent=4))
TypeError: a bytes-like object is required, not 'str'
ðŸ§¨ karl.rink@Karl-MacBook-Pro s3labeler %





           try:
                s3_upload = s3_client.upload_file(source, s3bucket, s3object)
            except botocore.exceptions.ClientError as e:
                #print(str(e))
                print(json.dumps({'ClientError':str(e)}, indent=2))
                sys.exit(1)

            #print(response) #None
            #status_code = s3_upload['ResponseMetadata']['HTTPStatusCode']
            #print(status_code)

            print(json.dumps({'upload':True}, indent=2))
            sys.exit(0)


            #import tempfile
            #fp = tempfile.TemporaryFile()
            #fp.write(body)
            #with open(fp, 'rb') as bfile:
            #    _f = bfile.read()






revist the ls trailing slash /


ðŸ§¨ karl.rink@Karl-MacBook-Pro s3labeler % ./s3labeler.py ls ninfo-property-images/rekognit/   
{
  "EmptyBucket": "ninfo-property-images"
}
ðŸ§¨ karl.rink@Karl-MacBook-Pro s3labeler % ./s3labeler.py ls ninfo-property-images/rekognition/
[
  "rekognition/00000023a562a2525633af58b9a710063f56a877.jpg.json",
  "rekognition/00001796475b02a1db8c89106b0ba12d76a6217b.jpg.json",
  "rekognition/0001e7888e40c760b2e566ede76ff25d67c7d39b.jpg.json",
  "rekognition/2eece964b6f902124052810e5a92d6f9ca715c1b.jpg.json"
]



response = client.detect_labels(Image={'S3Object':{'Bucket':s3bucket,'Name':s3object}})
i
<class 'dict'>
{'Labels': [{'Name': 'Flooring', 'Confidence': 99.99486541748047, 'Instances': [], 'Parents': []}, {'Name': 'Floor', 'Confidence': 99.99276733398438, 'Instances': [], 'Parents': []}, {'Name': 'Door', 'Confidence': 86.09169006347656, 'Instances': [{'BoundingBox': {'Width': 0.23239736258983612, 'Height': 0.6427014470100403, 'Left': 0.748911440372467, 'Top': 0.299064576625824}, 'Confidence': 86.09169006347656}], 'Parents': []}, {'Name': 'Indoors', 'Confidence': 83.34758758544922, 'Instances': [], 'Parents': []}, {'Name': 'Room', 'Confidence': 74.61431884765625, 'Instances': [], 'Parents': [{'Name': 'Indoors'}]}, {'Name': 'Wood', 'Confidence': 57.04332733154297, 'Instances': [], 'Parents': []}], 'LabelModelVersion': '2.0', 'ResponseMetadata': {'RequestId': 'a047b67e-1f57-4fac-b50a-b84539110a5b', 'HTTPStatusCode': 200, 'HTTPHeaders': {'content-type': 'application/x-amz-json-1.1', 'date': 'Mon, 26 Jul 2021 18:11:46 GMT', 'x-amzn-requestid': 'a047b67e-1f57-4fac-b50a-b84539110a5b', 'content-length': '667', 'connection': 'keep-alive'}, 'RetryAttempts': 0}}
Label: Flooring
Label: Floor
Label: Door
Label: Indoors
Label: Room
Label: Wood




#response = client.detect_labels(Image={'S3Object':{'Bucket':s3bucket,'Name':s3object}}, MaxLabels=10)


ðŸ§¨ karl.rink@Karl-MacBook-Pro s3labeler % ./s3labeler.py rekognition ninfo-property-images/00000023a562a2525633af58b9a710063f56a877.jpg detect-labels
detect-labels
ninfo-property-images
00000023a562a2525633af58b9a710063f56a877.jpg
us-west-2
<class 'dict'>
{'Labels': [{'Name': 'Flooring', 'Confidence': 99.99486541748047, 'Instances': [], 'Parents': []}, {'Name': 'Floor', 'Confidence': 99.99276733398438, 'Instances': [], 'Parents': []}, {'Name': 'Door', 'Confidence': 86.09169006347656, 'Instances': [{'BoundingBox': {'Width': 0.23239736258983612, 'Height': 0.6427014470100403, 'Left': 0.748911440372467, 'Top': 0.299064576625824}, 'Confidence': 86.09169006347656}], 'Parents': []}, {'Name': 'Indoors', 'Confidence': 83.34758758544922, 'Instances': [], 'Parents': []}, {'Name': 'Room', 'Confidence': 74.61431884765625, 'Instances': [], 'Parents': [{'Name': 'Indoors'}]}, {'Name': 'Wood', 'Confidence': 57.04332733154297, 'Instances': [], 'Parents': []}], 'LabelModelVersion': '2.0', 'ResponseMetadata': {'RequestId': '735ead0f-23cf-438b-b24c-13c9e6bd9796', 'HTTPStatusCode': 200, 'HTTPHeaders': {'content-type': 'application/x-amz-json-1.1', 'date': 'Mon, 26 Jul 2021 18:02:13 GMT', 'x-amzn-requestid': '735ead0f-23cf-438b-b24c-13c9e6bd9796', 'content-length': '667', 'connection': 'keep-alive'}, 'RetryAttempts': 0}}
Label: Flooring
Label: Floor
Label: Door
Label: Indoors
Label: Room
Label: Wood
ðŸ§¨ karl.rink@Karl-MacBook-Pro s3labeler %



don't forget the  --region us-west-2


aws rekognition detect-labels --image '{"S3Object":{"Bucket":"ninfo-property-images","Name":"00001796475b02a1db8c89106b0ba12d76a6217b.jpg"}}' 


ðŸ§¨ karl.rink@Karl-MacBook-Pro image_classifier % aws rekognition detect-labels --image '{"S3Object":{"Bucket":"ninfo-property-images","Name":"00001796475b02a1db8c89106b0ba12d76a6217b.jpg"}}'

An error occurred (InvalidS3ObjectException) when calling the DetectLabels operation: Unable to get object metadata from S3. Check object key, region and/or access permissions.
ðŸ§¨ karl.rink@Karl-MacBook-Pro image_classifier %




ðŸ§¨ karl.rink@Karl-MacBook-Pro s3labeler % ./s3labeler.py rekognition ninfo-property-images/00001796475b02a1db8c89106b0ba12d76a6217b.jpg detect-labels
detect-labels
ninfo-property-images
00001796475b02a1db8c89106b0ba12d76a6217b.jpg
Traceback (most recent call last):
  File "./s3labeler.py", line 1379, in <module>
    main()
  File "./s3labeler.py", line 1107, in main
    response = client.detect_labels(Image={'S3Object':{'Bucket':s3bucket,'Name':s3object}}, MaxLabels=10)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/botocore/client.py", line 386, in _api_call
    return self._make_api_call(operation_name, kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/botocore/client.py", line 705, in _make_api_call
    raise error_class(parsed_response, operation_name)
botocore.errorfactory.InvalidS3ObjectException: An error occurred (InvalidS3ObjectException) when calling the DetectLabels operation: Unable to get object metadata from S3. Check object key, region and/or access permissions.
ðŸ§¨ karl.rink@Karl-MacBook-Pro s3labeler %

---

ðŸ§¨ karl.rink@Karl-MacBook-Pro image_classifier % aws rekognition detect-labels --image '{"S3Object":{"Bucket":"ninfo-property-images","Name":"00001796475b02a1db8c89106b0ba12d76a6217b.jpg"}}' --region us-west-2
{
    "Labels": [
        {
            "Name": "Corner",
            "Confidence": 98.32282257080078,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Appliance",
            "Confidence": 95.76081848144531,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Ceiling Fan",
            "Confidence": 92.94519805908203,
            "Instances": [
                {
                    "BoundingBox": {
                        "Width": 0.30115851759910583,
                        "Height": 0.22155123949050903,
                        "Left": 0.39029446244239807,
                        "Top": 0.002962381113320589
                    },
                    "Confidence": 92.94519805908203
                }
            ],
            "Parents": [
                {
                    "Name": "Appliance"
                }
            ]
        },
        {
            "Name": "Furniture",
            "Confidence": 81.3620376586914,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Indoors",
            "Confidence": 78.88905334472656,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Housing",
            "Confidence": 73.43911743164062,
            "Instances": [],
            "Parents": [
                {
                    "Name": "Building"
                }
            ]
        },
        {
            "Name": "Building",
            "Confidence": 73.43911743164062,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Flooring",
            "Confidence": 72.95887756347656,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Floor",
            "Confidence": 70.50959777832031,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Table",
            "Confidence": 66.49359130859375,
            "Instances": [],
            "Parents": [
                {
                    "Name": "Furniture"
                }
            ]
        },
        {
            "Name": "Electronics",
            "Confidence": 58.811153411865234,
            "Instances": [],
            "Parents": []
        },
        {
            "Name": "Cabinet",
            "Confidence": 58.374168395996094,
            "Instances": [],
            "Parents": [
                {
                    "Name": "Furniture"
                }
            ]
        }
    ],
    "LabelModelVersion": "2.0"
}
ðŸ§¨ karl.rink@Karl-MacBook-Pro image_classifier % 



