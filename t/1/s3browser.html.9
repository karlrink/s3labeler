<!DOCTYPE html>
<html>

<head>
  <title></title>

  <meta charset="utf-8">

</head>

<body> 
    <noscript>Please Enable JavaScript</noscript>

<div class="container"></div>

<script type="text/javascript">

async function getBuckets_v1() {
    let url = 'http://127.0.0.1:8880/s3/';
    try {
        let res = await fetch(url, {mode:'cors'});
        return await res.json();
    } catch (error) {
        console.log(error);
    }
}

async function renderBuckets_v1() {
    let buckets = await getBuckets();
    let html = '';
    buckets.forEach(bucket => {
        //console.log(bucket)
        //let htmlSegment = `<div class=""> <a href="http://127.0.0.1:8880/s3/${bucket}/">${bucket}</a> </div>`;
        let htmlSegment = `<div class=""> <button onclick="renderBucketFiles('${bucket}')">${bucket}</button> </div>`;

        html += htmlSegment;
    });

    let container = document.querySelector('.container');
    container.innerHTML = html;
}

async function renderBuckets() {

    let url = 'http://127.0.0.1:8880/s3/';

    let html = '';

    try {
        let response = await fetch(url, {mode:'cors'});
        let buckets = await response.json();
        buckets.forEach(bucket => {
        let htmlSegment = `<div class=""> <button onclick="renderBucketFiles('${bucket}')">${bucket}</button> </div>`;

        html += htmlSegment;
    });
    } catch (error) {
        html += error;
    }

    let container = document.querySelector('.container');
    container.innerHTML = html;

    history.pushState({page: 1}, "title 1", "?page=1");
}


async function getBucketFiles(bucket) {
    let url = 'http://127.0.0.1:8880/s3/' + bucket + '/';
    try {
        let res = await fetch(url, {mode:'cors'});
        return await res.json();
    } catch (error) {
        console.log(error);
    }
}

async function renderBucketFiles(bucket) {

    let files = await getBucketFiles(bucket);
    let html = '';
    files.forEach(file => {
        //let htmlSegment = `<div class=""> <a href="http://127.0.0.1:8880/s3/${bucket}/${file}">${bucket}/${file}</a> </div>`;
        let htmlSegment = `<div class=""> <button onclick="renderFileLabels('${bucket}','${file}')">${bucket}/${file}</button> </div>`;

        html += htmlSegment;
    });

    let container = document.querySelector('.container');
    container.innerHTML = html;

    history.pushState({page: 2}, "title 2", "?page=2");
}


async function getFileLabels(bucket, file) {

    let url = 'http://127.0.0.1:8880/s3/' + bucket + '/' + file;
    try {
        let res = await fetch(url, {mode:'cors'});
        return await res.json();
    } catch (error) {
        console.log(error);
        //return error
    }
}

async function renderFileLabels(bucket, file) {

    let labels = await getFileLabels(bucket, file);

    let html = '';
    //let html = '<div>' + bucket +  '/' + file + '</div>';
    //let html = bucket +  '/' + file;

    for (const [key, value] of Object.entries(labels)) {
      //console.log(`${key}: ${value}`);
      let htmlSegment = `<div class=""> <p>${key} : ${value}</p> </div>`;
      html += htmlSegment;
    }

    let container = document.querySelector('.container');
    container.innerHTML = html;

    history.pushState({page: 3}, "title 3", "?page=3");
}

/*
window.onpopstate = function(event) {
  alert(`location: ${document.location}, state: ${JSON.stringify(event.state)}`);
}
*/

/*
window.addEventListener("popstate", function(e) {

	// URL location
	var location = document.location;

	// state
	var state = e.state;

	// return to last state
	if (state.view == "CONTENT") {
		...
	}

   console.log(performance.navigation.type);
   if(performance.navigation.type == 1){
     location.reload(true);
   }

});
*/

/*
window.addEventListener('popstate', function(event) {
    // The popstate event is fired each time when the current history entry changes.

    var r = confirm("You pressed a Back button! Are you sure?!");

    if (r == true) {
        // Call Back button programmatically as per user confirmation.
        history.back();
        // Uncomment below line to redirect to the previous page instead.
        // window.location = document.referrer // Note: IE11 is not supporting this.
        window.location = document.referrer; // Note: IE11 is not supporting this.
    } else {
        // Stay on the current page.
        history.pushState(null, null, window.location.pathname);
    }

    history.pushState(null, null, window.location.pathname);

}, false);
*/

window.addEventListener("popstate", function(e) {

    // URL location
    //var location = document.location;
    var location = document.location;

    // state
    var state = e.state;

    // return to last state
    //if (state.view == "CONTENT") {
    //    ...
    //}

   //console.log(performance.navigation.type);
   //if(performance.navigation.type == 1){
     //location.reload(true);
   //  window.location = document.referrer;
   //}

    //location.reload(true);

    //var perfEntries = performance.getEntriesByType("navigation");
    //for (var i = 0; i < perfEntries.length; i++) {
    //    console.log(perfEntries[i].type);
    //}


});


var perfEntries = performance.getEntriesByType("navigation");
for (var i = 0; i < perfEntries.length; i++) {
    console.log(perfEntries[i].type);
}


renderBuckets();
//renderBucketFiles('bucket_name');
//renderFileLabels('ninfo', 'test.txt');

</script>

<footer>
    <hr>
    <button onclick="window.history.go(-1)">Go Back</button>
</footer>

</body>

</html>
